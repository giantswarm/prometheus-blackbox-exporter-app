restartPolicy: Always

kind: DaemonSet
tolerations:
  - effect: NoSchedule
    operator: "Exists"
    key: node-role.kubernetes.io/master

config:
  modules:
    http_2xx:
      prober: http
      timeout: 5s
      http:
        valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
        follow_redirects: true
        preferred_ip_protocol: "ip4"
    dns_tcp_external:
      prober: dns
      dns:
        transport_protocol: "tcp"
        preferred_ip_protocol: "ip4"
        query_name: "www.prometheus.io"
    dns_udp_external:
      prober: dns
      dns:
        preferred_ip_protocol: "ip4"
        query_name: "www.prometheus.io"
    dns_tcp_internal:
      prober: dns
      dns:
        transport_protocol: "tcp"
        preferred_ip_protocol: "ip4"
        query_name: "kubernetes.default.svc.cluster.local"
    dns_udp_internal:
      prober: dns
      dns:
        preferred_ip_protocol: "ip4"
        query_name: "kubernetes.default.svc.cluster.local"

resources:
  limits:
    memory: 100Mi
    cpu: 30m
  requests:
    memory: 20Mi
    cpu: 10m

## Network policy for chart
networkPolicy:
  # Enable network policy and allow access from anywhere
  enabled: true
  # Limit access only from monitoring namespace
  # Before setting this value to true, you must add the name=monitoring label to the monitoring namespace
  # Network Policy uses label filtering
  allowMonitoringNamespace: false


serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator for blackbox-exporter itself
  ##
  selfMonitor:
    enabled: false
    additionalMetricsRelabels: {}
    additionalRelabeling: []
    labels: {}
    interval: 30s
    scrapeTimeout: 30s

  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator for each target
  ##
  enabled: true

  # Default values that will be used for all ServiceMonitors created by `targets`
  defaults:
    additionalMetricsRelabels: {}
    additionalRelabeling: []
    labels: {}
    interval: 30s
    scrapeTimeout: 30s
    module: http_2xx

  ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
  scheme: http
  ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
  ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
  tlsConfig: {}
  bearerTokenFile:

  targets:
    - name: giantswarm-http
      target: https://giantswarm.io
      hostname: giantswarm.io
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: http_2xx
    - name: api-https
      target: https://kubernetes.default.svc.cluster.local/livez
      hostname: kubernetes.default.svc.cluster.local
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: http_2xx
    - name: dns-tcp-external
      target: coredns
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: dns_tcp_external
    - name: dns-udp-external
      target: coredns
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: dns_udp_external
    - name: dns-tcp-internal
      target: coredns
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: dns_tcp_external
    - name: dns-udp-internal
      target: coredns
      labels:
        application.giantswarm.io/team: phoenix
      interval: 60s
      module: dns_udp_external